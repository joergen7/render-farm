% RENDER-FARM
%
% render farm using POV-Ray
%
%
% Copyright:: 2019 JÃ¶rgen Brandt
%
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
%
%    http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.
%
%
% In addition to a Cuneiform interpreter the script requires the
% following tools:
% - ImageMagick 6.9.10
% - POV-RAY 3.7.0
% - Racket 7.2
%
%--------------------------------------------------------------

%%====================================================================
%% Functions
%%====================================================================

def povray( pov    : File,
            height : Str,
            width  : Str,
            sr     : Str,
            er     : Str,
            sc     : Str,
            ec     : Str ) -> <png : File>
in Bash *{
  povray -D +WT1 \
    +Opre.png \
    +W$width \
    +H$height \
    +SR$sr \
    +ER$er \
    +SC$sc \
    +EC$ec \
    $pov

  h=`expr $er - $sr`
  w=`expr $ec - $sc`
  png=scene.png
  convert -crop ${w}x${h}+${sc}+${sr} pre.png $png
}*

def montage-horz( pnglst : [File] ) -> <png : File>
in Bash *{
  png=montage.png
  montage -geometry +0+0 -tile ${#pnglst[@]}x1 ${pnglst[@]} $png
}*

def montage-vert( pnglst : [File] ) -> <png : File>
in Bash *{
  png=montage.png
  montage -geometry +0+0 -tile 1x${#pnglst[@]} ${pnglst[@]} $png
}*

def range( size : Str, n : Str ) -> <lo-lst : [Str], hi-lst : [Str]>
in Racket *{
  (require (only-in racket/list range))
  (define s (string->number size))
  (define step (/ s (string->number n)))
  (define lo-lst (map number->string (map floor (range 0 s step))))
  (define hi-lst (append (cdr lo-lst) (list size)))
}*


%%====================================================================
%% Input data
%%====================================================================

let pov : File = 'scene.pov';


%%====================================================================
%% Parameters
%%====================================================================

let height : Str = 1080;
let width : Str = 1080;
let dop : Str = 10;


%%====================================================================
%% Dependencies
%%====================================================================

let <lo-lst = row-lo-lst : [Str],
     hi-lst = row-hi-lst : [Str]> =
  range( size = height, n = dop );

let <lo-lst = col-lo-lst : [Str],
     hi-lst = col-hi-lst : [Str]> =
  range( size = width, n = dop );


let column : [File] =
  for sr : Str <- row-lo-lst,
      er : Str <- row-hi-lst do

    let line : [File] =
      for sc : Str <- col-lo-lst,
          ec : Str <- col-hi-lst do

        ( povray( pov    = pov,
                  height = height,
                  width  = width,
                  sr     = sr,
                  er     = er,
                  sc     = sc,
                  ec     = ec )|png ) : File
      end;

    ( montage-horz( pnglst = line )|png ) : File
  end;

let <png = result : File> =
  montage-vert( pnglst = column );

%%====================================================================
%% Query
%%====================================================================

result;